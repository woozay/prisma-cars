// Code generated by Prisma (prisma@1.20.7). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode, GraphQLSchema } from "graphql";
import { makePrismaClientClass, BaseClientOptions } from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export interface Exists {
  carBodyType: (where?: CarBodyTypeWhereInput) => Promise<boolean>;
  carFuelType: (where?: CarFuelTypeWhereInput) => Promise<boolean>;
  carMake: (where?: CarMakeWhereInput) => Promise<boolean>;
  carModel: (where?: CarModelWhereInput) => Promise<boolean>;
  carSpec: (where?: CarSpecWhereInput) => Promise<boolean>;
  carTrim: (where?: CarTrimWhereInput) => Promise<boolean>;
  post: (where?: PostWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  carBodyType: (where: CarBodyTypeWhereUniqueInput) => CarBodyTypePromise;
  carBodyTypes: (
    args?: {
      where?: CarBodyTypeWhereInput;
      orderBy?: CarBodyTypeOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<CarBodyType>;
  carBodyTypesConnection: (
    args?: {
      where?: CarBodyTypeWhereInput;
      orderBy?: CarBodyTypeOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => CarBodyTypeConnectionPromise;
  carFuelType: (where: CarFuelTypeWhereUniqueInput) => CarFuelTypePromise;
  carFuelTypes: (
    args?: {
      where?: CarFuelTypeWhereInput;
      orderBy?: CarFuelTypeOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<CarFuelType>;
  carFuelTypesConnection: (
    args?: {
      where?: CarFuelTypeWhereInput;
      orderBy?: CarFuelTypeOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => CarFuelTypeConnectionPromise;
  carMake: (where: CarMakeWhereUniqueInput) => CarMakePromise;
  carMakes: (
    args?: {
      where?: CarMakeWhereInput;
      orderBy?: CarMakeOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<CarMake>;
  carMakesConnection: (
    args?: {
      where?: CarMakeWhereInput;
      orderBy?: CarMakeOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => CarMakeConnectionPromise;
  carModel: (where: CarModelWhereUniqueInput) => CarModelPromise;
  carModels: (
    args?: {
      where?: CarModelWhereInput;
      orderBy?: CarModelOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<CarModel>;
  carModelsConnection: (
    args?: {
      where?: CarModelWhereInput;
      orderBy?: CarModelOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => CarModelConnectionPromise;
  carSpec: (where: CarSpecWhereUniqueInput) => CarSpecPromise;
  carSpecs: (
    args?: {
      where?: CarSpecWhereInput;
      orderBy?: CarSpecOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<CarSpec>;
  carSpecsConnection: (
    args?: {
      where?: CarSpecWhereInput;
      orderBy?: CarSpecOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => CarSpecConnectionPromise;
  carTrim: (where: CarTrimWhereUniqueInput) => CarTrimPromise;
  carTrims: (
    args?: {
      where?: CarTrimWhereInput;
      orderBy?: CarTrimOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<CarTrim>;
  carTrimsConnection: (
    args?: {
      where?: CarTrimWhereInput;
      orderBy?: CarTrimOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => CarTrimConnectionPromise;
  post: (where: PostWhereUniqueInput) => PostPromise;
  posts: (
    args?: {
      where?: PostWhereInput;
      orderBy?: PostOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Post>;
  postsConnection: (
    args?: {
      where?: PostWhereInput;
      orderBy?: PostOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => PostConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserPromise;
  users: (
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<User>;
  usersConnection: (
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createCarBodyType: (data: CarBodyTypeCreateInput) => CarBodyTypePromise;
  updateCarBodyType: (
    args: { data: CarBodyTypeUpdateInput; where: CarBodyTypeWhereUniqueInput }
  ) => CarBodyTypePromise;
  updateManyCarBodyTypes: (
    args: {
      data: CarBodyTypeUpdateManyMutationInput;
      where?: CarBodyTypeWhereInput;
    }
  ) => BatchPayloadPromise;
  upsertCarBodyType: (
    args: {
      where: CarBodyTypeWhereUniqueInput;
      create: CarBodyTypeCreateInput;
      update: CarBodyTypeUpdateInput;
    }
  ) => CarBodyTypePromise;
  deleteCarBodyType: (where: CarBodyTypeWhereUniqueInput) => CarBodyTypePromise;
  deleteManyCarBodyTypes: (
    where?: CarBodyTypeWhereInput
  ) => BatchPayloadPromise;
  createCarFuelType: (data: CarFuelTypeCreateInput) => CarFuelTypePromise;
  updateCarFuelType: (
    args: { data: CarFuelTypeUpdateInput; where: CarFuelTypeWhereUniqueInput }
  ) => CarFuelTypePromise;
  updateManyCarFuelTypes: (
    args: {
      data: CarFuelTypeUpdateManyMutationInput;
      where?: CarFuelTypeWhereInput;
    }
  ) => BatchPayloadPromise;
  upsertCarFuelType: (
    args: {
      where: CarFuelTypeWhereUniqueInput;
      create: CarFuelTypeCreateInput;
      update: CarFuelTypeUpdateInput;
    }
  ) => CarFuelTypePromise;
  deleteCarFuelType: (where: CarFuelTypeWhereUniqueInput) => CarFuelTypePromise;
  deleteManyCarFuelTypes: (
    where?: CarFuelTypeWhereInput
  ) => BatchPayloadPromise;
  createCarMake: (data: CarMakeCreateInput) => CarMakePromise;
  updateCarMake: (
    args: { data: CarMakeUpdateInput; where: CarMakeWhereUniqueInput }
  ) => CarMakePromise;
  updateManyCarMakes: (
    args: { data: CarMakeUpdateManyMutationInput; where?: CarMakeWhereInput }
  ) => BatchPayloadPromise;
  upsertCarMake: (
    args: {
      where: CarMakeWhereUniqueInput;
      create: CarMakeCreateInput;
      update: CarMakeUpdateInput;
    }
  ) => CarMakePromise;
  deleteCarMake: (where: CarMakeWhereUniqueInput) => CarMakePromise;
  deleteManyCarMakes: (where?: CarMakeWhereInput) => BatchPayloadPromise;
  createCarModel: (data: CarModelCreateInput) => CarModelPromise;
  updateCarModel: (
    args: { data: CarModelUpdateInput; where: CarModelWhereUniqueInput }
  ) => CarModelPromise;
  updateManyCarModels: (
    args: { data: CarModelUpdateManyMutationInput; where?: CarModelWhereInput }
  ) => BatchPayloadPromise;
  upsertCarModel: (
    args: {
      where: CarModelWhereUniqueInput;
      create: CarModelCreateInput;
      update: CarModelUpdateInput;
    }
  ) => CarModelPromise;
  deleteCarModel: (where: CarModelWhereUniqueInput) => CarModelPromise;
  deleteManyCarModels: (where?: CarModelWhereInput) => BatchPayloadPromise;
  createCarSpec: (data: CarSpecCreateInput) => CarSpecPromise;
  updateCarSpec: (
    args: { data: CarSpecUpdateInput; where: CarSpecWhereUniqueInput }
  ) => CarSpecPromise;
  updateManyCarSpecs: (
    args: { data: CarSpecUpdateManyMutationInput; where?: CarSpecWhereInput }
  ) => BatchPayloadPromise;
  upsertCarSpec: (
    args: {
      where: CarSpecWhereUniqueInput;
      create: CarSpecCreateInput;
      update: CarSpecUpdateInput;
    }
  ) => CarSpecPromise;
  deleteCarSpec: (where: CarSpecWhereUniqueInput) => CarSpecPromise;
  deleteManyCarSpecs: (where?: CarSpecWhereInput) => BatchPayloadPromise;
  createCarTrim: (data: CarTrimCreateInput) => CarTrimPromise;
  updateCarTrim: (
    args: { data: CarTrimUpdateInput; where: CarTrimWhereUniqueInput }
  ) => CarTrimPromise;
  updateManyCarTrims: (
    args: { data: CarTrimUpdateManyMutationInput; where?: CarTrimWhereInput }
  ) => BatchPayloadPromise;
  upsertCarTrim: (
    args: {
      where: CarTrimWhereUniqueInput;
      create: CarTrimCreateInput;
      update: CarTrimUpdateInput;
    }
  ) => CarTrimPromise;
  deleteCarTrim: (where: CarTrimWhereUniqueInput) => CarTrimPromise;
  deleteManyCarTrims: (where?: CarTrimWhereInput) => BatchPayloadPromise;
  createPost: (data: PostCreateInput) => PostPromise;
  updatePost: (
    args: { data: PostUpdateInput; where: PostWhereUniqueInput }
  ) => PostPromise;
  updateManyPosts: (
    args: { data: PostUpdateManyMutationInput; where?: PostWhereInput }
  ) => BatchPayloadPromise;
  upsertPost: (
    args: {
      where: PostWhereUniqueInput;
      create: PostCreateInput;
      update: PostUpdateInput;
    }
  ) => PostPromise;
  deletePost: (where: PostWhereUniqueInput) => PostPromise;
  deleteManyPosts: (where?: PostWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (
    args: { data: UserUpdateInput; where: UserWhereUniqueInput }
  ) => UserPromise;
  updateManyUsers: (
    args: { data: UserUpdateManyMutationInput; where?: UserWhereInput }
  ) => BatchPayloadPromise;
  upsertUser: (
    args: {
      where: UserWhereUniqueInput;
      create: UserCreateInput;
      update: UserUpdateInput;
    }
  ) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  carBodyType: (
    where?: CarBodyTypeSubscriptionWhereInput
  ) => CarBodyTypeSubscriptionPayloadSubscription;
  carFuelType: (
    where?: CarFuelTypeSubscriptionWhereInput
  ) => CarFuelTypeSubscriptionPayloadSubscription;
  carMake: (
    where?: CarMakeSubscriptionWhereInput
  ) => CarMakeSubscriptionPayloadSubscription;
  carModel: (
    where?: CarModelSubscriptionWhereInput
  ) => CarModelSubscriptionPayloadSubscription;
  carSpec: (
    where?: CarSpecSubscriptionWhereInput
  ) => CarSpecSubscriptionPayloadSubscription;
  carTrim: (
    where?: CarTrimSubscriptionWhereInput
  ) => CarTrimSubscriptionPayloadSubscription;
  post: (
    where?: PostSubscriptionWhereInput
  ) => PostSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type CarSpecOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "year_from_ASC"
  | "year_from_DESC"
  | "year_to_ASC"
  | "year_to_DESC"
  | "zero_to_sixty_ASC"
  | "zero_to_sixty_DESC"
  | "no_of_doors_ASC"
  | "no_of_doors_DESC"
  | "no_of_seats_ASC"
  | "no_of_seats_DESC"
  | "power_ps_ASC"
  | "power_ps_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type CarModelOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type CarTrimOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type CarBodyTypeOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type CarFuelTypeOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type CarMakeOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type PostOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "title_ASC"
  | "title_DESC"
  | "published_ASC"
  | "published_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export interface CarTrimUpsertWithoutCarSpecsInput {
  update: CarTrimUpdateWithoutCarSpecsDataInput;
  create: CarTrimCreateWithoutCarSpecsInput;
}

export type CarBodyTypeWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface CarSpecCreateWithoutBody_typeInput {
  trim?: CarTrimCreateOneWithoutCarSpecsInput;
  fuel_type?: CarFuelTypeCreateOneWithoutCarSpecsInput;
  year_from?: Int;
  year_to?: Int;
  zero_to_sixty?: Float;
  no_of_doors?: Int;
  no_of_seats?: Int;
  power_ps?: Int;
}

export interface CarModelUpdateWithoutMakeDataInput {
  name?: String;
  trims?: CarTrimUpdateManyWithoutModelInput;
}

export interface CarTrimCreateOneWithoutCarSpecsInput {
  create?: CarTrimCreateWithoutCarSpecsInput;
  connect?: CarTrimWhereUniqueInput;
}

export interface PostSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: PostWhereInput;
  AND?: PostSubscriptionWhereInput[] | PostSubscriptionWhereInput;
  OR?: PostSubscriptionWhereInput[] | PostSubscriptionWhereInput;
  NOT?: PostSubscriptionWhereInput[] | PostSubscriptionWhereInput;
}

export interface CarTrimCreateWithoutCarSpecsInput {
  name: String;
  model: CarModelCreateOneWithoutTrimsInput;
}

export interface CarSpecSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: CarSpecWhereInput;
  AND?: CarSpecSubscriptionWhereInput[] | CarSpecSubscriptionWhereInput;
  OR?: CarSpecSubscriptionWhereInput[] | CarSpecSubscriptionWhereInput;
  NOT?: CarSpecSubscriptionWhereInput[] | CarSpecSubscriptionWhereInput;
}

export interface CarModelCreateOneWithoutTrimsInput {
  create?: CarModelCreateWithoutTrimsInput;
  connect?: CarModelWhereUniqueInput;
}

export interface CarBodyTypeWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  carSpecs_every?: CarSpecWhereInput;
  carSpecs_some?: CarSpecWhereInput;
  carSpecs_none?: CarSpecWhereInput;
  AND?: CarBodyTypeWhereInput[] | CarBodyTypeWhereInput;
  OR?: CarBodyTypeWhereInput[] | CarBodyTypeWhereInput;
  NOT?: CarBodyTypeWhereInput[] | CarBodyTypeWhereInput;
}

export interface CarModelCreateWithoutTrimsInput {
  name: String;
  make: CarMakeCreateOneWithoutModelsInput;
}

export interface CarMakeWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  models_every?: CarModelWhereInput;
  models_some?: CarModelWhereInput;
  models_none?: CarModelWhereInput;
  AND?: CarMakeWhereInput[] | CarMakeWhereInput;
  OR?: CarMakeWhereInput[] | CarMakeWhereInput;
  NOT?: CarMakeWhereInput[] | CarMakeWhereInput;
}

export interface CarMakeCreateOneWithoutModelsInput {
  create?: CarMakeCreateWithoutModelsInput;
  connect?: CarMakeWhereUniqueInput;
}

export interface CarFuelTypeSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: CarFuelTypeWhereInput;
  AND?: CarFuelTypeSubscriptionWhereInput[] | CarFuelTypeSubscriptionWhereInput;
  OR?: CarFuelTypeSubscriptionWhereInput[] | CarFuelTypeSubscriptionWhereInput;
  NOT?: CarFuelTypeSubscriptionWhereInput[] | CarFuelTypeSubscriptionWhereInput;
}

export interface CarMakeCreateWithoutModelsInput {
  name: String;
}

export interface UserUpdateManyMutationInput {
  name?: String;
}

export interface CarFuelTypeCreateOneWithoutCarSpecsInput {
  create?: CarFuelTypeCreateWithoutCarSpecsInput;
  connect?: CarFuelTypeWhereUniqueInput;
}

export type CarFuelTypeWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface CarFuelTypeCreateWithoutCarSpecsInput {
  name?: String;
}

export interface PostUpdateManyMutationInput {
  title?: String;
  published?: Boolean;
}

export interface CarBodyTypeUpdateInput {
  name?: String;
  carSpecs?: CarSpecUpdateManyWithoutBody_typeInput;
}

export interface UserUpdateDataInput {
  name?: String;
}

export interface CarSpecUpdateManyWithoutBody_typeInput {
  create?:
    | CarSpecCreateWithoutBody_typeInput[]
    | CarSpecCreateWithoutBody_typeInput;
  delete?: CarSpecWhereUniqueInput[] | CarSpecWhereUniqueInput;
  connect?: CarSpecWhereUniqueInput[] | CarSpecWhereUniqueInput;
  disconnect?: CarSpecWhereUniqueInput[] | CarSpecWhereUniqueInput;
  update?:
    | CarSpecUpdateWithWhereUniqueWithoutBody_typeInput[]
    | CarSpecUpdateWithWhereUniqueWithoutBody_typeInput;
  upsert?:
    | CarSpecUpsertWithWhereUniqueWithoutBody_typeInput[]
    | CarSpecUpsertWithWhereUniqueWithoutBody_typeInput;
}

export interface CarTrimWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  model?: CarModelWhereInput;
  carSpecs_every?: CarSpecWhereInput;
  carSpecs_some?: CarSpecWhereInput;
  carSpecs_none?: CarSpecWhereInput;
  AND?: CarTrimWhereInput[] | CarTrimWhereInput;
  OR?: CarTrimWhereInput[] | CarTrimWhereInput;
  NOT?: CarTrimWhereInput[] | CarTrimWhereInput;
}

export interface CarSpecUpdateWithWhereUniqueWithoutBody_typeInput {
  where: CarSpecWhereUniqueInput;
  data: CarSpecUpdateWithoutBody_typeDataInput;
}

export interface PostUpdateInput {
  title?: String;
  published?: Boolean;
  author?: UserUpdateOneInput;
}

export interface CarSpecUpdateWithoutBody_typeDataInput {
  trim?: CarTrimUpdateOneWithoutCarSpecsInput;
  fuel_type?: CarFuelTypeUpdateOneWithoutCarSpecsInput;
  year_from?: Int;
  year_to?: Int;
  zero_to_sixty?: Float;
  no_of_doors?: Int;
  no_of_seats?: Int;
  power_ps?: Int;
}

export type CarModelWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface CarTrimUpdateOneWithoutCarSpecsInput {
  create?: CarTrimCreateWithoutCarSpecsInput;
  update?: CarTrimUpdateWithoutCarSpecsDataInput;
  upsert?: CarTrimUpsertWithoutCarSpecsInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: CarTrimWhereUniqueInput;
}

export interface PostCreateInput {
  title: String;
  published?: Boolean;
  author?: UserCreateOneInput;
}

export interface CarTrimUpdateWithoutCarSpecsDataInput {
  name?: String;
  model?: CarModelUpdateOneRequiredWithoutTrimsInput;
}

export type CarSpecWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface CarModelUpdateOneRequiredWithoutTrimsInput {
  create?: CarModelCreateWithoutTrimsInput;
  update?: CarModelUpdateWithoutTrimsDataInput;
  upsert?: CarModelUpsertWithoutTrimsInput;
  connect?: CarModelWhereUniqueInput;
}

export interface CarTrimCreateInput {
  name: String;
  model: CarModelCreateOneWithoutTrimsInput;
  carSpecs?: CarSpecCreateManyWithoutTrimInput;
}

export interface CarModelUpdateWithoutTrimsDataInput {
  name?: String;
  make?: CarMakeUpdateOneRequiredWithoutModelsInput;
}

export type CarTrimWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface CarMakeUpdateOneRequiredWithoutModelsInput {
  create?: CarMakeCreateWithoutModelsInput;
  update?: CarMakeUpdateWithoutModelsDataInput;
  upsert?: CarMakeUpsertWithoutModelsInput;
  connect?: CarMakeWhereUniqueInput;
}

export interface CarSpecCreateInput {
  trim?: CarTrimCreateOneWithoutCarSpecsInput;
  body_type?: CarBodyTypeCreateOneWithoutCarSpecsInput;
  fuel_type?: CarFuelTypeCreateOneWithoutCarSpecsInput;
  year_from?: Int;
  year_to?: Int;
  zero_to_sixty?: Float;
  no_of_doors?: Int;
  no_of_seats?: Int;
  power_ps?: Int;
}

export interface CarMakeUpdateWithoutModelsDataInput {
  name?: String;
}

export type PostWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface CarMakeUpsertWithoutModelsInput {
  update: CarMakeUpdateWithoutModelsDataInput;
  create: CarMakeCreateWithoutModelsInput;
}

export interface CarModelCreateInput {
  name: String;
  make: CarMakeCreateOneWithoutModelsInput;
  trims?: CarTrimCreateManyWithoutModelInput;
}

export interface CarModelUpsertWithoutTrimsInput {
  update: CarModelUpdateWithoutTrimsDataInput;
  create: CarModelCreateWithoutTrimsInput;
}

export interface UserWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  AND?: UserWhereInput[] | UserWhereInput;
  OR?: UserWhereInput[] | UserWhereInput;
  NOT?: UserWhereInput[] | UserWhereInput;
}

export interface CarTrimUpdateWithoutModelDataInput {
  name?: String;
  carSpecs?: CarSpecUpdateManyWithoutTrimInput;
}

export interface CarMakeUpdateManyMutationInput {
  name?: String;
}

export interface CarFuelTypeUpdateOneWithoutCarSpecsInput {
  create?: CarFuelTypeCreateWithoutCarSpecsInput;
  update?: CarFuelTypeUpdateWithoutCarSpecsDataInput;
  upsert?: CarFuelTypeUpsertWithoutCarSpecsInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: CarFuelTypeWhereUniqueInput;
}

export interface CarTrimUpsertWithWhereUniqueWithoutModelInput {
  where: CarTrimWhereUniqueInput;
  update: CarTrimUpdateWithoutModelDataInput;
  create: CarTrimCreateWithoutModelInput;
}

export interface CarFuelTypeUpdateWithoutCarSpecsDataInput {
  name?: String;
}

export interface CarSpecUpsertWithWhereUniqueWithoutTrimInput {
  where: CarSpecWhereUniqueInput;
  update: CarSpecUpdateWithoutTrimDataInput;
  create: CarSpecCreateWithoutTrimInput;
}

export interface CarFuelTypeUpsertWithoutCarSpecsInput {
  update: CarFuelTypeUpdateWithoutCarSpecsDataInput;
  create: CarFuelTypeCreateWithoutCarSpecsInput;
}

export interface CarSpecUpdateWithWhereUniqueWithoutTrimInput {
  where: CarSpecWhereUniqueInput;
  data: CarSpecUpdateWithoutTrimDataInput;
}

export interface CarBodyTypeCreateInput {
  name?: String;
  carSpecs?: CarSpecCreateManyWithoutBody_typeInput;
}

export interface CarModelUpdateWithWhereUniqueWithoutMakeInput {
  where: CarModelWhereUniqueInput;
  data: CarModelUpdateWithoutMakeDataInput;
}

export interface CarBodyTypeUpdateManyMutationInput {
  name?: String;
}

export interface CarSpecUpsertWithWhereUniqueWithoutBody_typeInput {
  where: CarSpecWhereUniqueInput;
  update: CarSpecUpdateWithoutBody_typeDataInput;
  create: CarSpecCreateWithoutBody_typeInput;
}

export interface CarTrimUpdateWithWhereUniqueWithoutModelInput {
  where: CarTrimWhereUniqueInput;
  data: CarTrimUpdateWithoutModelDataInput;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: UserWhereInput;
  AND?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  OR?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
  NOT?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
}

export interface CarTrimUpdateManyWithoutModelInput {
  create?: CarTrimCreateWithoutModelInput[] | CarTrimCreateWithoutModelInput;
  delete?: CarTrimWhereUniqueInput[] | CarTrimWhereUniqueInput;
  connect?: CarTrimWhereUniqueInput[] | CarTrimWhereUniqueInput;
  disconnect?: CarTrimWhereUniqueInput[] | CarTrimWhereUniqueInput;
  update?:
    | CarTrimUpdateWithWhereUniqueWithoutModelInput[]
    | CarTrimUpdateWithWhereUniqueWithoutModelInput;
  upsert?:
    | CarTrimUpsertWithWhereUniqueWithoutModelInput[]
    | CarTrimUpsertWithWhereUniqueWithoutModelInput;
}

export interface CarFuelTypeWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  carSpecs_every?: CarSpecWhereInput;
  carSpecs_some?: CarSpecWhereInput;
  carSpecs_none?: CarSpecWhereInput;
  AND?: CarFuelTypeWhereInput[] | CarFuelTypeWhereInput;
  OR?: CarFuelTypeWhereInput[] | CarFuelTypeWhereInput;
  NOT?: CarFuelTypeWhereInput[] | CarFuelTypeWhereInput;
}

export interface CarFuelTypeCreateInput {
  name?: String;
  carSpecs?: CarSpecCreateManyWithoutFuel_typeInput;
}

export interface CarMakeSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: CarMakeWhereInput;
  AND?: CarMakeSubscriptionWhereInput[] | CarMakeSubscriptionWhereInput;
  OR?: CarMakeSubscriptionWhereInput[] | CarMakeSubscriptionWhereInput;
  NOT?: CarMakeSubscriptionWhereInput[] | CarMakeSubscriptionWhereInput;
}

export interface CarSpecCreateManyWithoutFuel_typeInput {
  create?:
    | CarSpecCreateWithoutFuel_typeInput[]
    | CarSpecCreateWithoutFuel_typeInput;
  connect?: CarSpecWhereUniqueInput[] | CarSpecWhereUniqueInput;
}

export interface UserUpdateInput {
  name?: String;
}

export interface CarSpecCreateWithoutFuel_typeInput {
  trim?: CarTrimCreateOneWithoutCarSpecsInput;
  body_type?: CarBodyTypeCreateOneWithoutCarSpecsInput;
  year_from?: Int;
  year_to?: Int;
  zero_to_sixty?: Float;
  no_of_doors?: Int;
  no_of_seats?: Int;
  power_ps?: Int;
}

export interface UserUpsertNestedInput {
  update: UserUpdateDataInput;
  create: UserCreateInput;
}

export interface CarBodyTypeCreateOneWithoutCarSpecsInput {
  create?: CarBodyTypeCreateWithoutCarSpecsInput;
  connect?: CarBodyTypeWhereUniqueInput;
}

export interface UserUpdateOneInput {
  create?: UserCreateInput;
  update?: UserUpdateDataInput;
  upsert?: UserUpsertNestedInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: UserWhereUniqueInput;
}

export interface CarBodyTypeCreateWithoutCarSpecsInput {
  name?: String;
}

export interface UserCreateOneInput {
  create?: UserCreateInput;
  connect?: UserWhereUniqueInput;
}

export interface CarFuelTypeUpdateInput {
  name?: String;
  carSpecs?: CarSpecUpdateManyWithoutFuel_typeInput;
}

export interface CarTrimUpdateInput {
  name?: String;
  model?: CarModelUpdateOneRequiredWithoutTrimsInput;
  carSpecs?: CarSpecUpdateManyWithoutTrimInput;
}

export interface CarSpecUpdateManyWithoutFuel_typeInput {
  create?:
    | CarSpecCreateWithoutFuel_typeInput[]
    | CarSpecCreateWithoutFuel_typeInput;
  delete?: CarSpecWhereUniqueInput[] | CarSpecWhereUniqueInput;
  connect?: CarSpecWhereUniqueInput[] | CarSpecWhereUniqueInput;
  disconnect?: CarSpecWhereUniqueInput[] | CarSpecWhereUniqueInput;
  update?:
    | CarSpecUpdateWithWhereUniqueWithoutFuel_typeInput[]
    | CarSpecUpdateWithWhereUniqueWithoutFuel_typeInput;
  upsert?:
    | CarSpecUpsertWithWhereUniqueWithoutFuel_typeInput[]
    | CarSpecUpsertWithWhereUniqueWithoutFuel_typeInput;
}

export interface CarSpecUpdateInput {
  trim?: CarTrimUpdateOneWithoutCarSpecsInput;
  body_type?: CarBodyTypeUpdateOneWithoutCarSpecsInput;
  fuel_type?: CarFuelTypeUpdateOneWithoutCarSpecsInput;
  year_from?: Int;
  year_to?: Int;
  zero_to_sixty?: Float;
  no_of_doors?: Int;
  no_of_seats?: Int;
  power_ps?: Int;
}

export interface CarSpecUpdateWithWhereUniqueWithoutFuel_typeInput {
  where: CarSpecWhereUniqueInput;
  data: CarSpecUpdateWithoutFuel_typeDataInput;
}

export interface CarModelUpdateInput {
  name?: String;
  make?: CarMakeUpdateOneRequiredWithoutModelsInput;
  trims?: CarTrimUpdateManyWithoutModelInput;
}

export interface CarSpecUpdateWithoutFuel_typeDataInput {
  trim?: CarTrimUpdateOneWithoutCarSpecsInput;
  body_type?: CarBodyTypeUpdateOneWithoutCarSpecsInput;
  year_from?: Int;
  year_to?: Int;
  zero_to_sixty?: Float;
  no_of_doors?: Int;
  no_of_seats?: Int;
  power_ps?: Int;
}

export interface CarSpecWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  trim?: CarTrimWhereInput;
  body_type?: CarBodyTypeWhereInput;
  fuel_type?: CarFuelTypeWhereInput;
  year_from?: Int;
  year_from_not?: Int;
  year_from_in?: Int[] | Int;
  year_from_not_in?: Int[] | Int;
  year_from_lt?: Int;
  year_from_lte?: Int;
  year_from_gt?: Int;
  year_from_gte?: Int;
  year_to?: Int;
  year_to_not?: Int;
  year_to_in?: Int[] | Int;
  year_to_not_in?: Int[] | Int;
  year_to_lt?: Int;
  year_to_lte?: Int;
  year_to_gt?: Int;
  year_to_gte?: Int;
  zero_to_sixty?: Float;
  zero_to_sixty_not?: Float;
  zero_to_sixty_in?: Float[] | Float;
  zero_to_sixty_not_in?: Float[] | Float;
  zero_to_sixty_lt?: Float;
  zero_to_sixty_lte?: Float;
  zero_to_sixty_gt?: Float;
  zero_to_sixty_gte?: Float;
  no_of_doors?: Int;
  no_of_doors_not?: Int;
  no_of_doors_in?: Int[] | Int;
  no_of_doors_not_in?: Int[] | Int;
  no_of_doors_lt?: Int;
  no_of_doors_lte?: Int;
  no_of_doors_gt?: Int;
  no_of_doors_gte?: Int;
  no_of_seats?: Int;
  no_of_seats_not?: Int;
  no_of_seats_in?: Int[] | Int;
  no_of_seats_not_in?: Int[] | Int;
  no_of_seats_lt?: Int;
  no_of_seats_lte?: Int;
  no_of_seats_gt?: Int;
  no_of_seats_gte?: Int;
  power_ps?: Int;
  power_ps_not?: Int;
  power_ps_in?: Int[] | Int;
  power_ps_not_in?: Int[] | Int;
  power_ps_lt?: Int;
  power_ps_lte?: Int;
  power_ps_gt?: Int;
  power_ps_gte?: Int;
  AND?: CarSpecWhereInput[] | CarSpecWhereInput;
  OR?: CarSpecWhereInput[] | CarSpecWhereInput;
  NOT?: CarSpecWhereInput[] | CarSpecWhereInput;
}

export interface CarBodyTypeUpdateOneWithoutCarSpecsInput {
  create?: CarBodyTypeCreateWithoutCarSpecsInput;
  update?: CarBodyTypeUpdateWithoutCarSpecsDataInput;
  upsert?: CarBodyTypeUpsertWithoutCarSpecsInput;
  delete?: Boolean;
  disconnect?: Boolean;
  connect?: CarBodyTypeWhereUniqueInput;
}

export type UserWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface CarBodyTypeUpdateWithoutCarSpecsDataInput {
  name?: String;
}

export interface CarSpecUpdateManyWithoutTrimInput {
  create?: CarSpecCreateWithoutTrimInput[] | CarSpecCreateWithoutTrimInput;
  delete?: CarSpecWhereUniqueInput[] | CarSpecWhereUniqueInput;
  connect?: CarSpecWhereUniqueInput[] | CarSpecWhereUniqueInput;
  disconnect?: CarSpecWhereUniqueInput[] | CarSpecWhereUniqueInput;
  update?:
    | CarSpecUpdateWithWhereUniqueWithoutTrimInput[]
    | CarSpecUpdateWithWhereUniqueWithoutTrimInput;
  upsert?:
    | CarSpecUpsertWithWhereUniqueWithoutTrimInput[]
    | CarSpecUpsertWithWhereUniqueWithoutTrimInput;
}

export interface CarBodyTypeUpsertWithoutCarSpecsInput {
  update: CarBodyTypeUpdateWithoutCarSpecsDataInput;
  create: CarBodyTypeCreateWithoutCarSpecsInput;
}

export interface CarTrimSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: CarTrimWhereInput;
  AND?: CarTrimSubscriptionWhereInput[] | CarTrimSubscriptionWhereInput;
  OR?: CarTrimSubscriptionWhereInput[] | CarTrimSubscriptionWhereInput;
  NOT?: CarTrimSubscriptionWhereInput[] | CarTrimSubscriptionWhereInput;
}

export interface CarSpecUpsertWithWhereUniqueWithoutFuel_typeInput {
  where: CarSpecWhereUniqueInput;
  update: CarSpecUpdateWithoutFuel_typeDataInput;
  create: CarSpecCreateWithoutFuel_typeInput;
}

export interface CarBodyTypeSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: CarBodyTypeWhereInput;
  AND?: CarBodyTypeSubscriptionWhereInput[] | CarBodyTypeSubscriptionWhereInput;
  OR?: CarBodyTypeSubscriptionWhereInput[] | CarBodyTypeSubscriptionWhereInput;
  NOT?: CarBodyTypeSubscriptionWhereInput[] | CarBodyTypeSubscriptionWhereInput;
}

export interface CarFuelTypeUpdateManyMutationInput {
  name?: String;
}

export type CarMakeWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  name?: String;
}>;

export interface CarMakeCreateInput {
  name: String;
  models?: CarModelCreateManyWithoutMakeInput;
}

export interface CarTrimUpdateManyMutationInput {
  name?: String;
}

export interface CarModelCreateManyWithoutMakeInput {
  create?: CarModelCreateWithoutMakeInput[] | CarModelCreateWithoutMakeInput;
  connect?: CarModelWhereUniqueInput[] | CarModelWhereUniqueInput;
}

export interface CarModelUpdateManyMutationInput {
  name?: String;
}

export interface CarModelCreateWithoutMakeInput {
  name: String;
  trims?: CarTrimCreateManyWithoutModelInput;
}

export interface CarModelUpsertWithWhereUniqueWithoutMakeInput {
  where: CarModelWhereUniqueInput;
  update: CarModelUpdateWithoutMakeDataInput;
  create: CarModelCreateWithoutMakeInput;
}

export interface CarTrimCreateManyWithoutModelInput {
  create?: CarTrimCreateWithoutModelInput[] | CarTrimCreateWithoutModelInput;
  connect?: CarTrimWhereUniqueInput[] | CarTrimWhereUniqueInput;
}

export interface CarSpecCreateManyWithoutBody_typeInput {
  create?:
    | CarSpecCreateWithoutBody_typeInput[]
    | CarSpecCreateWithoutBody_typeInput;
  connect?: CarSpecWhereUniqueInput[] | CarSpecWhereUniqueInput;
}

export interface CarTrimCreateWithoutModelInput {
  name: String;
  carSpecs?: CarSpecCreateManyWithoutTrimInput;
}

export interface CarModelWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  name?: String;
  name_not?: String;
  name_in?: String[] | String;
  name_not_in?: String[] | String;
  name_lt?: String;
  name_lte?: String;
  name_gt?: String;
  name_gte?: String;
  name_contains?: String;
  name_not_contains?: String;
  name_starts_with?: String;
  name_not_starts_with?: String;
  name_ends_with?: String;
  name_not_ends_with?: String;
  make?: CarMakeWhereInput;
  trims_every?: CarTrimWhereInput;
  trims_some?: CarTrimWhereInput;
  trims_none?: CarTrimWhereInput;
  AND?: CarModelWhereInput[] | CarModelWhereInput;
  OR?: CarModelWhereInput[] | CarModelWhereInput;
  NOT?: CarModelWhereInput[] | CarModelWhereInput;
}

export interface CarSpecUpdateManyMutationInput {
  year_from?: Int;
  year_to?: Int;
  zero_to_sixty?: Float;
  no_of_doors?: Int;
  no_of_seats?: Int;
  power_ps?: Int;
}

export interface CarModelUpdateManyWithoutMakeInput {
  create?: CarModelCreateWithoutMakeInput[] | CarModelCreateWithoutMakeInput;
  delete?: CarModelWhereUniqueInput[] | CarModelWhereUniqueInput;
  connect?: CarModelWhereUniqueInput[] | CarModelWhereUniqueInput;
  disconnect?: CarModelWhereUniqueInput[] | CarModelWhereUniqueInput;
  update?:
    | CarModelUpdateWithWhereUniqueWithoutMakeInput[]
    | CarModelUpdateWithWhereUniqueWithoutMakeInput;
  upsert?:
    | CarModelUpsertWithWhereUniqueWithoutMakeInput[]
    | CarModelUpsertWithWhereUniqueWithoutMakeInput;
}

export interface CarMakeUpdateInput {
  name?: String;
  models?: CarModelUpdateManyWithoutMakeInput;
}

export interface CarSpecCreateWithoutTrimInput {
  body_type?: CarBodyTypeCreateOneWithoutCarSpecsInput;
  fuel_type?: CarFuelTypeCreateOneWithoutCarSpecsInput;
  year_from?: Int;
  year_to?: Int;
  zero_to_sixty?: Float;
  no_of_doors?: Int;
  no_of_seats?: Int;
  power_ps?: Int;
}

export interface CarSpecCreateManyWithoutTrimInput {
  create?: CarSpecCreateWithoutTrimInput[] | CarSpecCreateWithoutTrimInput;
  connect?: CarSpecWhereUniqueInput[] | CarSpecWhereUniqueInput;
}

export interface PostWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  title?: String;
  title_not?: String;
  title_in?: String[] | String;
  title_not_in?: String[] | String;
  title_lt?: String;
  title_lte?: String;
  title_gt?: String;
  title_gte?: String;
  title_contains?: String;
  title_not_contains?: String;
  title_starts_with?: String;
  title_not_starts_with?: String;
  title_ends_with?: String;
  title_not_ends_with?: String;
  published?: Boolean;
  published_not?: Boolean;
  author?: UserWhereInput;
  AND?: PostWhereInput[] | PostWhereInput;
  OR?: PostWhereInput[] | PostWhereInput;
  NOT?: PostWhereInput[] | PostWhereInput;
}

export interface UserCreateInput {
  name: String;
}

export interface CarModelSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: CarModelWhereInput;
  AND?: CarModelSubscriptionWhereInput[] | CarModelSubscriptionWhereInput;
  OR?: CarModelSubscriptionWhereInput[] | CarModelSubscriptionWhereInput;
  NOT?: CarModelSubscriptionWhereInput[] | CarModelSubscriptionWhereInput;
}

export interface CarSpecUpdateWithoutTrimDataInput {
  body_type?: CarBodyTypeUpdateOneWithoutCarSpecsInput;
  fuel_type?: CarFuelTypeUpdateOneWithoutCarSpecsInput;
  year_from?: Int;
  year_to?: Int;
  zero_to_sixty?: Float;
  no_of_doors?: Int;
  no_of_seats?: Int;
  power_ps?: Int;
}

export interface NodeNode {
  id: ID_Output;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface UserPreviousValues {
  id: ID_Output;
  name: String;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface CarFuelTypeEdge {
  cursor: String;
}

export interface CarFuelTypeEdgePromise
  extends Promise<CarFuelTypeEdge>,
    Fragmentable {
  node: <T = CarFuelTypePromise>() => T;
  cursor: () => Promise<String>;
}

export interface CarFuelTypeEdgeSubscription
  extends Promise<AsyncIterator<CarFuelTypeEdge>>,
    Fragmentable {
  node: <T = CarFuelTypeSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface CarTrim {
  id: ID_Output;
  name: String;
}

export interface CarTrimPromise extends Promise<CarTrim>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  model: <T = CarModelPromise>() => T;
  carSpecs: <T = FragmentableArray<CarSpec>>(
    args?: {
      where?: CarSpecWhereInput;
      orderBy?: CarSpecOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface CarTrimSubscription
  extends Promise<AsyncIterator<CarTrim>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  model: <T = CarModelSubscription>() => T;
  carSpecs: <T = Promise<AsyncIterator<CarSpecSubscription>>>(
    args?: {
      where?: CarSpecWhereInput;
      orderBy?: CarSpecOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface CarFuelTypeConnection {}

export interface CarFuelTypeConnectionPromise
  extends Promise<CarFuelTypeConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<CarFuelTypeEdge>>() => T;
  aggregate: <T = AggregateCarFuelTypePromise>() => T;
}

export interface CarFuelTypeConnectionSubscription
  extends Promise<AsyncIterator<CarFuelTypeConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<CarFuelTypeEdgeSubscription>>>() => T;
  aggregate: <T = AggregateCarFuelTypeSubscription>() => T;
}

export interface AggregateCarBodyType {
  count: Int;
}

export interface AggregateCarBodyTypePromise
  extends Promise<AggregateCarBodyType>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateCarBodyTypeSubscription
  extends Promise<AsyncIterator<AggregateCarBodyType>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface PostPreviousValues {
  id: ID_Output;
  title: String;
  published: Boolean;
}

export interface PostPreviousValuesPromise
  extends Promise<PostPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  published: () => Promise<Boolean>;
}

export interface PostPreviousValuesSubscription
  extends Promise<AsyncIterator<PostPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  published: () => Promise<AsyncIterator<Boolean>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface CarBodyTypeEdge {
  cursor: String;
}

export interface CarBodyTypeEdgePromise
  extends Promise<CarBodyTypeEdge>,
    Fragmentable {
  node: <T = CarBodyTypePromise>() => T;
  cursor: () => Promise<String>;
}

export interface CarBodyTypeEdgeSubscription
  extends Promise<AsyncIterator<CarBodyTypeEdge>>,
    Fragmentable {
  node: <T = CarBodyTypeSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface UserConnection {}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface PostSubscriptionPayload {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface PostSubscriptionPayloadPromise
  extends Promise<PostSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = PostPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = PostPreviousValuesPromise>() => T;
}

export interface PostSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<PostSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = PostSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = PostPreviousValuesSubscription>() => T;
}

export interface AggregatePost {
  count: Int;
}

export interface AggregatePostPromise
  extends Promise<AggregatePost>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregatePostSubscription
  extends Promise<AsyncIterator<AggregatePost>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface CarBodyType {
  id: ID_Output;
  name?: String;
}

export interface CarBodyTypePromise extends Promise<CarBodyType>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  carSpecs: <T = FragmentableArray<CarSpec>>(
    args?: {
      where?: CarSpecWhereInput;
      orderBy?: CarSpecOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface CarBodyTypeSubscription
  extends Promise<AsyncIterator<CarBodyType>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  carSpecs: <T = Promise<AsyncIterator<CarSpecSubscription>>>(
    args?: {
      where?: CarSpecWhereInput;
      orderBy?: CarSpecOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface PostConnection {}

export interface PostConnectionPromise
  extends Promise<PostConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<PostEdge>>() => T;
  aggregate: <T = AggregatePostPromise>() => T;
}

export interface PostConnectionSubscription
  extends Promise<AsyncIterator<PostConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<PostEdgeSubscription>>>() => T;
  aggregate: <T = AggregatePostSubscription>() => T;
}

export interface CarBodyTypeSubscriptionPayload {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface CarBodyTypeSubscriptionPayloadPromise
  extends Promise<CarBodyTypeSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = CarBodyTypePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = CarBodyTypePreviousValuesPromise>() => T;
}

export interface CarBodyTypeSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<CarBodyTypeSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = CarBodyTypeSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = CarBodyTypePreviousValuesSubscription>() => T;
}

export interface Post {
  id: ID_Output;
  title: String;
  published: Boolean;
}

export interface PostPromise extends Promise<Post>, Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  published: () => Promise<Boolean>;
  author: <T = UserPromise>() => T;
}

export interface PostSubscription
  extends Promise<AsyncIterator<Post>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  published: () => Promise<AsyncIterator<Boolean>>;
  author: <T = UserSubscription>() => T;
}

export interface CarBodyTypePreviousValues {
  id: ID_Output;
  name?: String;
}

export interface CarBodyTypePreviousValuesPromise
  extends Promise<CarBodyTypePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
}

export interface CarBodyTypePreviousValuesSubscription
  extends Promise<AsyncIterator<CarBodyTypePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface CarTrimEdge {
  cursor: String;
}

export interface CarTrimEdgePromise extends Promise<CarTrimEdge>, Fragmentable {
  node: <T = CarTrimPromise>() => T;
  cursor: () => Promise<String>;
}

export interface CarTrimEdgeSubscription
  extends Promise<AsyncIterator<CarTrimEdge>>,
    Fragmentable {
  node: <T = CarTrimSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateCarSpec {
  count: Int;
}

export interface AggregateCarSpecPromise
  extends Promise<AggregateCarSpec>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateCarSpecSubscription
  extends Promise<AsyncIterator<AggregateCarSpec>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface CarFuelTypeSubscriptionPayload {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface CarFuelTypeSubscriptionPayloadPromise
  extends Promise<CarFuelTypeSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = CarFuelTypePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = CarFuelTypePreviousValuesPromise>() => T;
}

export interface CarFuelTypeSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<CarFuelTypeSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = CarFuelTypeSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = CarFuelTypePreviousValuesSubscription>() => T;
}

export interface CarSpecConnection {}

export interface CarSpecConnectionPromise
  extends Promise<CarSpecConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<CarSpecEdge>>() => T;
  aggregate: <T = AggregateCarSpecPromise>() => T;
}

export interface CarSpecConnectionSubscription
  extends Promise<AsyncIterator<CarSpecConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<CarSpecEdgeSubscription>>>() => T;
  aggregate: <T = AggregateCarSpecSubscription>() => T;
}

export interface CarFuelTypePreviousValues {
  id: ID_Output;
  name?: String;
}

export interface CarFuelTypePreviousValuesPromise
  extends Promise<CarFuelTypePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
}

export interface CarFuelTypePreviousValuesSubscription
  extends Promise<AsyncIterator<CarFuelTypePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface CarModelEdge {
  cursor: String;
}

export interface CarModelEdgePromise
  extends Promise<CarModelEdge>,
    Fragmentable {
  node: <T = CarModelPromise>() => T;
  cursor: () => Promise<String>;
}

export interface CarModelEdgeSubscription
  extends Promise<AsyncIterator<CarModelEdge>>,
    Fragmentable {
  node: <T = CarModelSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface CarBodyTypeConnection {}

export interface CarBodyTypeConnectionPromise
  extends Promise<CarBodyTypeConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<CarBodyTypeEdge>>() => T;
  aggregate: <T = AggregateCarBodyTypePromise>() => T;
}

export interface CarBodyTypeConnectionSubscription
  extends Promise<AsyncIterator<CarBodyTypeConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<CarBodyTypeEdgeSubscription>>>() => T;
  aggregate: <T = AggregateCarBodyTypeSubscription>() => T;
}

export interface AggregateCarMake {
  count: Int;
}

export interface AggregateCarMakePromise
  extends Promise<AggregateCarMake>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateCarMakeSubscription
  extends Promise<AsyncIterator<AggregateCarMake>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface CarMakeSubscriptionPayload {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface CarMakeSubscriptionPayloadPromise
  extends Promise<CarMakeSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = CarMakePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = CarMakePreviousValuesPromise>() => T;
}

export interface CarMakeSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<CarMakeSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = CarMakeSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = CarMakePreviousValuesSubscription>() => T;
}

export interface CarMakeConnection {}

export interface CarMakeConnectionPromise
  extends Promise<CarMakeConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<CarMakeEdge>>() => T;
  aggregate: <T = AggregateCarMakePromise>() => T;
}

export interface CarMakeConnectionSubscription
  extends Promise<AsyncIterator<CarMakeConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<CarMakeEdgeSubscription>>>() => T;
  aggregate: <T = AggregateCarMakeSubscription>() => T;
}

export interface CarMakePreviousValues {
  id: ID_Output;
  name: String;
}

export interface CarMakePreviousValuesPromise
  extends Promise<CarMakePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
}

export interface CarMakePreviousValuesSubscription
  extends Promise<AsyncIterator<CarMakePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface CarFuelType {
  id: ID_Output;
  name?: String;
}

export interface CarFuelTypePromise extends Promise<CarFuelType>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  carSpecs: <T = FragmentableArray<CarSpec>>(
    args?: {
      where?: CarSpecWhereInput;
      orderBy?: CarSpecOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface CarFuelTypeSubscription
  extends Promise<AsyncIterator<CarFuelType>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  carSpecs: <T = Promise<AsyncIterator<CarSpecSubscription>>>(
    args?: {
      where?: CarSpecWhereInput;
      orderBy?: CarSpecOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface CarSpec {
  id: ID_Output;
  year_from?: Int;
  year_to?: Int;
  zero_to_sixty?: Float;
  no_of_doors?: Int;
  no_of_seats?: Int;
  power_ps?: Int;
}

export interface CarSpecPromise extends Promise<CarSpec>, Fragmentable {
  id: () => Promise<ID_Output>;
  trim: <T = CarTrimPromise>() => T;
  body_type: <T = CarBodyTypePromise>() => T;
  fuel_type: <T = CarFuelTypePromise>() => T;
  year_from: () => Promise<Int>;
  year_to: () => Promise<Int>;
  zero_to_sixty: () => Promise<Float>;
  no_of_doors: () => Promise<Int>;
  no_of_seats: () => Promise<Int>;
  power_ps: () => Promise<Int>;
}

export interface CarSpecSubscription
  extends Promise<AsyncIterator<CarSpec>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  trim: <T = CarTrimSubscription>() => T;
  body_type: <T = CarBodyTypeSubscription>() => T;
  fuel_type: <T = CarFuelTypeSubscription>() => T;
  year_from: () => Promise<AsyncIterator<Int>>;
  year_to: () => Promise<AsyncIterator<Int>>;
  zero_to_sixty: () => Promise<AsyncIterator<Float>>;
  no_of_doors: () => Promise<AsyncIterator<Int>>;
  no_of_seats: () => Promise<AsyncIterator<Int>>;
  power_ps: () => Promise<AsyncIterator<Int>>;
}

export interface CarModelSubscriptionPayload {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface CarModelSubscriptionPayloadPromise
  extends Promise<CarModelSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = CarModelPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = CarModelPreviousValuesPromise>() => T;
}

export interface CarModelSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<CarModelSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = CarModelSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = CarModelPreviousValuesSubscription>() => T;
}

export interface User {
  id: ID_Output;
  name: String;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface CarModelPreviousValues {
  id: ID_Output;
  name: String;
}

export interface CarModelPreviousValuesPromise
  extends Promise<CarModelPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
}

export interface CarModelPreviousValuesSubscription
  extends Promise<AsyncIterator<CarModelPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface CarTrimConnection {}

export interface CarTrimConnectionPromise
  extends Promise<CarTrimConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<CarTrimEdge>>() => T;
  aggregate: <T = AggregateCarTrimPromise>() => T;
}

export interface CarTrimConnectionSubscription
  extends Promise<AsyncIterator<CarTrimConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<CarTrimEdgeSubscription>>>() => T;
  aggregate: <T = AggregateCarTrimSubscription>() => T;
}

export interface CarMake {
  id: ID_Output;
  name: String;
}

export interface CarMakePromise extends Promise<CarMake>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  models: <T = FragmentableArray<CarModel>>(
    args?: {
      where?: CarModelWhereInput;
      orderBy?: CarModelOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface CarMakeSubscription
  extends Promise<AsyncIterator<CarMake>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  models: <T = Promise<AsyncIterator<CarModelSubscription>>>(
    args?: {
      where?: CarModelWhereInput;
      orderBy?: CarModelOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface AggregateCarModel {
  count: Int;
}

export interface AggregateCarModelPromise
  extends Promise<AggregateCarModel>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateCarModelSubscription
  extends Promise<AsyncIterator<AggregateCarModel>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface CarSpecSubscriptionPayload {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface CarSpecSubscriptionPayloadPromise
  extends Promise<CarSpecSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = CarSpecPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = CarSpecPreviousValuesPromise>() => T;
}

export interface CarSpecSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<CarSpecSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = CarSpecSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = CarSpecPreviousValuesSubscription>() => T;
}

export interface CarMakeEdge {
  cursor: String;
}

export interface CarMakeEdgePromise extends Promise<CarMakeEdge>, Fragmentable {
  node: <T = CarMakePromise>() => T;
  cursor: () => Promise<String>;
}

export interface CarMakeEdgeSubscription
  extends Promise<AsyncIterator<CarMakeEdge>>,
    Fragmentable {
  node: <T = CarMakeSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface UserEdge {
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface CarTrimPreviousValues {
  id: ID_Output;
  name: String;
}

export interface CarTrimPreviousValuesPromise
  extends Promise<CarTrimPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
}

export interface CarTrimPreviousValuesSubscription
  extends Promise<AsyncIterator<CarTrimPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
}

export interface CarTrimSubscriptionPayload {
  mutation: MutationType;
  updatedFields?: String[];
}

export interface CarTrimSubscriptionPayloadPromise
  extends Promise<CarTrimSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = CarTrimPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = CarTrimPreviousValuesPromise>() => T;
}

export interface CarTrimSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<CarTrimSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = CarTrimSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = CarTrimPreviousValuesSubscription>() => T;
}

export interface CarModel {
  id: ID_Output;
  name: String;
}

export interface CarModelPromise extends Promise<CarModel>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  make: <T = CarMakePromise>() => T;
  trims: <T = FragmentableArray<CarTrim>>(
    args?: {
      where?: CarTrimWhereInput;
      orderBy?: CarTrimOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface CarModelSubscription
  extends Promise<AsyncIterator<CarModel>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  make: <T = CarMakeSubscription>() => T;
  trims: <T = Promise<AsyncIterator<CarTrimSubscription>>>(
    args?: {
      where?: CarTrimWhereInput;
      orderBy?: CarTrimOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface CarSpecPreviousValues {
  id: ID_Output;
  year_from?: Int;
  year_to?: Int;
  zero_to_sixty?: Float;
  no_of_doors?: Int;
  no_of_seats?: Int;
  power_ps?: Int;
}

export interface CarSpecPreviousValuesPromise
  extends Promise<CarSpecPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  year_from: () => Promise<Int>;
  year_to: () => Promise<Int>;
  zero_to_sixty: () => Promise<Float>;
  no_of_doors: () => Promise<Int>;
  no_of_seats: () => Promise<Int>;
  power_ps: () => Promise<Int>;
}

export interface CarSpecPreviousValuesSubscription
  extends Promise<AsyncIterator<CarSpecPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  year_from: () => Promise<AsyncIterator<Int>>;
  year_to: () => Promise<AsyncIterator<Int>>;
  zero_to_sixty: () => Promise<AsyncIterator<Float>>;
  no_of_doors: () => Promise<AsyncIterator<Int>>;
  no_of_seats: () => Promise<AsyncIterator<Int>>;
  power_ps: () => Promise<AsyncIterator<Int>>;
}

export interface PostEdge {
  cursor: String;
}

export interface PostEdgePromise extends Promise<PostEdge>, Fragmentable {
  node: <T = PostPromise>() => T;
  cursor: () => Promise<String>;
}

export interface PostEdgeSubscription
  extends Promise<AsyncIterator<PostEdge>>,
    Fragmentable {
  node: <T = PostSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateCarFuelType {
  count: Int;
}

export interface AggregateCarFuelTypePromise
  extends Promise<AggregateCarFuelType>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateCarFuelTypeSubscription
  extends Promise<AsyncIterator<AggregateCarFuelType>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface CarModelConnection {}

export interface CarModelConnectionPromise
  extends Promise<CarModelConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<CarModelEdge>>() => T;
  aggregate: <T = AggregateCarModelPromise>() => T;
}

export interface CarModelConnectionSubscription
  extends Promise<AsyncIterator<CarModelConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<CarModelEdgeSubscription>>>() => T;
  aggregate: <T = AggregateCarModelSubscription>() => T;
}

export interface CarSpecEdge {
  cursor: String;
}

export interface CarSpecEdgePromise extends Promise<CarSpecEdge>, Fragmentable {
  node: <T = CarSpecPromise>() => T;
  cursor: () => Promise<String>;
}

export interface CarSpecEdgeSubscription
  extends Promise<AsyncIterator<CarSpecEdge>>,
    Fragmentable {
  node: <T = CarSpecSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateCarTrim {
  count: Int;
}

export interface AggregateCarTrimPromise
  extends Promise<AggregateCarTrim>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateCarTrimSubscription
  extends Promise<AsyncIterator<AggregateCarTrim>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

/*
The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point). 
*/
export type Float = number;

export type Long = string;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/**
 * Model Metadata
 */

export const models = [
  {
    name: "CarBodyType",
    embedded: false
  },
  {
    name: "CarFuelType",
    embedded: false
  },
  {
    name: "CarMake",
    embedded: false
  },
  {
    name: "CarModel",
    embedded: false
  },
  {
    name: "CarSpec",
    embedded: false
  },
  {
    name: "CarTrim",
    embedded: false
  },
  {
    name: "Post",
    embedded: false
  },
  {
    name: "User",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
